@model ClearingAndForwarding.Models.Requisition

@{
    ViewData["Title"] = "Edit Requisition";
    var beList = ViewBag.beList ?? new List<object>();
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var entry in ViewData.ModelState)
            {
                foreach (var error in entry.Value.Errors)
                {
                    <li>@error.ErrorMessage</li>
                }
            }
        </ul>
    </div>
}

<form asp-action="upsert" method="post" class="p-4 border rounded shadow-sm bg-light">
    <h3 class="h5 mb-4">Edit Requisition</h3>

    <table class="table table-bordered">
        <tbody>
            <tr>
                <td>Employee Name:</td>
                <td>
                    <select asp-for="EmployeeId" class="form-select form-select-sm" asp-items="@ViewBag.EmployeeList"></select>
                    <span asp-validation-for="EmployeeId" class="text-danger"></span>
                </td>

                <td>Bill Date:</td>
                <td>
                    <input asp-for="RequisitionDate" class="form-control form-control-sm" type="date" />
                    <span asp-validation-for="RequisitionDate" class="text-danger"></span>
                </td>

                <td>Expense:</td>
                <td>
                    <select id="expenseDropdown" class="form-select form-select-sm">
                        
                    </select>
                    <input type="hidden" id="expenseID" name="ExpenseID" value="@Model.ExpenseID" />
                </td>
            </tr>

            <tr>
                <td>BE Number:</td>
                <td style="position: relative;">
                    <input id="BEdetailsID" type="text" class="form-control form-control-sm" autocomplete="off" value="@(Model.Bedetails?.BENo ?? "")" />
                    <div id="suggestionsBox" class="list-group" style="display:none; position:absolute; z-index:1000;"></div>
                    <input type="hidden" id="hiddenBE" name="BEdetailsID" value="@Model.BEdetailsID" />
                </td>

                <td>Requisition Number:</td>
                <td colspan="3">
                    <input asp-for="RequisitionNo" class="form-control form-control-sm" />
                    <span asp-validation-for="RequisitionNo" class="text-danger"></span>
                </td>
            </tr>
        </tbody>
    </table>

    <h4 class="h5 mt-4">Add Requisition Details</h4>
    <table class="table table-bordered">
        <tbody>
            <tr>
                <td>Requisition Head:</td>
                <td>
                    <select id="expenseHeadId" class="form-select form-select-sm" asp-items="@ViewBag.ExpenseHeadList"></select>
                </td>
                <td>Expense Amount:</td>
                <td>
                    <input id="RequisitionAmount" type="number" min="0" class="form-control form-control-sm" placeholder="Enter amount" />
                </td>
                <td class="text-center">
                    <button type="button" id="addRequisitionDetailButton" class="btn btn-primary btn-sm">Add</button>
                </td>
            </tr>
        </tbody>
    </table>

    <h5 class="h6 mt-4">Added Requisition Details</h5>
    <table class="table table-striped table-bordered table-sm">
        <thead>
            <tr>
                <th style="width: 75%;">Expense Head</th>
                <th style="width: 15%;" class="text-end">Amount</th>
                <th style="width: 10%;" class="text-center">Action</th>
            </tr>
        </thead>
        <tbody id="RequisitionDetailsTableBody"></tbody>
        <tfoot>
            <tr id="totalRow" style="display:none;">
                <th>Total</th>
                <th class="text-end" id="totalAmount" style="padding-right: 20px;">0</th>
                <th></th>
            </tr>
        </tfoot>
    </table>

    <input type="hidden" id="totalAmountField" name="RequisitionAmount" value="0" />
    <div id="RequisitionDetailsHiddenFields"></div>

    <button type="submit" class="btn btn-success btn-sm mt-3">Save</button>
</form>

@section Scripts {
    <script>
        console.log("Initial ExpenseID:", document.getElementById('expenseID').value);
        document.addEventListener('DOMContentLoaded', () => {
            const beList = @Html.Raw(Json.Serialize(beList));
            const beInput = document.getElementById('BEdetailsID');
            const hiddenBE = document.getElementById('hiddenBE');
            const suggestionsBox = document.getElementById('suggestionsBox');

            const expenseDropdown = document.getElementById('expenseDropdown');
            const expenseHidden = document.getElementById('expenseID');

            const showBESuggestions = () => {
                const val = beInput.value.toLowerCase().trim();
                suggestionsBox.innerHTML = '';
                suggestionsBox.style.display = 'none';
                hiddenBE.value = '';

                if (!val) return;

                const matches = beList.filter(x => x.text.toLowerCase().includes(val)).slice(0, 5);
                matches.forEach(item => {
                    const div = document.createElement('div');
                    div.className = 'list-group-item list-group-item-action';
                    div.textContent = item.text;
                    div.onclick = () => {
                        beInput.value = item.text;
                        hiddenBE.value = item.value;
                        suggestionsBox.style.display = 'none';
                        filterExpensesByBEId(item.value);
                    };
                    suggestionsBox.appendChild(div);
                });

                if (matches.length) suggestionsBox.style.display = 'block';
            };

            beInput.addEventListener('input', showBESuggestions);

            document.addEventListener('click', e => {
                if (!beInput.contains(e.target) && !suggestionsBox.contains(e.target)) {
                    suggestionsBox.style.display = 'none';
                }
            });

            window.addEventListener('resize', () => {
                suggestionsBox.style.width = beInput.offsetWidth + 'px';
            });

            function filterExpensesByBEId(beId) {
                expenseDropdown.length = 1; 
                

                if (!beId) return;

                fetch(`/Requisitions/GetExpensesByBEId?beId=${encodeURIComponent(beId)}`)
                    .then(res => res.json())
                    .then(data => {
                        data.forEach(exp => {
                            const option = new Option(`${exp.employeeName} - ${exp.billType} - ${exp.amount.toFixed(2)}`, exp.id);
                            expenseDropdown.add(option);

                        // Now check if any option matches hidden expenseID
                            const targetExpenseId = expenseHidden.value;
                            let foundMatch = false;
                            console.log(expenseHidden.value)
                            for (let i = 0; i < expenseDropdown.options.length; i++) {
                                if (expenseDropdown.options[i].value === targetExpenseId) {
                                    expenseDropdown.selectedIndex = i;
                                    foundMatch = true;
                                    
                                    break;
                                }
                            }
                        });
                    })
                    .catch(err => {
                        console.error('Error loading expenses:', err);
                        expenseDropdown.length = 1;
                    });
            }

            expenseDropdown.addEventListener('change', () => {
                expenseHidden.value = expenseDropdown.value;
            });

            if (hiddenBE.value) filterExpensesByBEId(hiddenBE.value);

            // Requisition Details Logic
            let RequisitionDetails = [];
            let totalAmount = 0;

            @foreach (var d in Model.RequisitionDetails)
            {
                    <text>
                        RequisitionDetails.push({ ExpenseHeadId: @d.ExpenseHeadId, ExpenseName: "@d.ExpenseHead.ExpenseName", Amount: @d.Amount });
                    </text>
            }

            const updateTable = () => {
                const tbody = document.getElementById('RequisitionDetailsTableBody');
                const hiddenFields = document.getElementById('RequisitionDetailsHiddenFields');
                tbody.innerHTML = '';
                hiddenFields.innerHTML = '';
                totalAmount = 0;

                document.getElementById('totalRow').style.display = RequisitionDetails.length ? 'table-row' : 'none';

                RequisitionDetails.forEach((d, i) => {
                    totalAmount += d.Amount;

                    tbody.insertAdjacentHTML('beforeend', `
                        <tr>
                            <td>${d.ExpenseName}</td>
                            <td class="text-end" style="padding-right:20px;">${d.Amount.toFixed(2)}</td>
                            <td class="text-center">
                                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="removeDetail(${i})">Remove</button>
                            </td>
                        </tr>
                    `);

                    hiddenFields.insertAdjacentHTML('beforeend', `
                        <input type="hidden" name="RequisitionDetails[${i}].ExpenseHeadId" value="${d.ExpenseHeadId}" />
                        <input type="hidden" name="RequisitionDetails[${i}].Amount" value="${d.Amount}" />
                    `);
                });

                document.getElementById('totalAmount').textContent = totalAmount.toFixed(2);
                document.getElementById('totalAmountField').value = totalAmount.toFixed(2);
            };

            const removeDetail = idx => {
                RequisitionDetails.splice(idx, 1);
                updateTable();
            };

            window.removeDetail = removeDetail;

            const addRequisitionDetail = () => {
                const headSelect = document.getElementById('expenseHeadId');
                const amountInput = document.getElementById('RequisitionAmount');
                const headId = headSelect.value;
                const headName = headSelect.options[headSelect.selectedIndex]?.text;
                const amount = parseFloat(amountInput.value);

                if (!headId || isNaN(amount) || amount <= 0) {
                    alert('Select valid expense head and enter amount.');
                    return;
                }

                RequisitionDetails.push({ ExpenseHeadId: headId, ExpenseName: headName, Amount: amount });
                amountInput.value = '';
                updateTable();
            };

            document.getElementById('addRequisitionDetailButton').addEventListener('click', addRequisitionDetail);
            document.getElementById('RequisitionAmount').addEventListener('keydown', e => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    addRequisitionDetail();
                    document.getElementById("expenseHeadId").focus();
                }
            });

            updateTable();

            document.querySelector('form').addEventListener('submit', e => {
                if (!beInput.value || !hiddenBE.value) {
                    e.preventDefault();
                    alert('Please select a valid BE number!');
                }
            });
        });
    </script>
}
